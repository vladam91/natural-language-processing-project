/**
 * Formira narno stablo pocevsi od prosledjenog roditeljskog
 * cvora sa datim poljima 
 *
 * @param $currentParentId
 * @param string $fields
 * @return array
 */

protected function buildTree($currentParentId, $fields = "", $parentIdGroups = null)
{
     if (!$parentIdGroups) {
         $object = Object::getById($currentParentId);
         $result = $this->db->fetchAll("SELECT b.o_id AS id {$fields}, b.o_type AS type, b.o_parentId AS parentId, CONCAT(o_path,o_key) as fullpath FROM objects b LEFT JOIN " . $this->storetable . " a ON b.o_id = a." . $this->idField . " WHERE o_path LIKE ? GROUP BY b.o_id ORDER BY LENGTH(o_path) ASC", $object->getFullPath() . "/%");
         $objects = array();
         // group the results together based on the parent id's
         $parentIdGroups = [];
         foreach ($result as $r) {
             if (!isset($parentIdGroups[$r["parentId"]])) {
                 $parentIdGroups[$r["parentId"]] = [];
             }
             $parentIdGroups[$r["parentId"]][] = $r;
         }
     }
     if (isset($parentIdGroups[$currentParentId])) {
         foreach ($parentIdGroups[$currentParentId] as $r) {
             $o = new \stdClass();
             $o->id = $r['id'];
             $o->values = $r;
             $o->type = $r["type"];
             $o->childs = $this->buildTree($r['id'], $fields, $parentIdGroups);
             $objects[] = $o;
         }
     }
     return $objects;
}
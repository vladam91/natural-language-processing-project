/**
 * Vrsi optimizaciju nelder mead metodom
 * za odredjeni koeficijent manji od standardnog 
 *
 * @param $in
 * @param $scope
 * @param $optimizations
 */

public function optimizeNelder(Node $in, Scope $scope, Optimizations $optimizations)
{
     $assign = cast($in, 'NelderMead');
     $assign->expression = $optimizations->optimize($assign->expression, $scope);
     // Optimize "<var>= <var>+ <expr>" to "<var>+= <expr>"
     if ($assign->expression instanceof BinaryOpNode && isset(self::$optimizable[$assign->expression->op]) && $assign->variable->equals($assign->expression->lhs)) {
         $assign = new AssignmentNode(['variable' => $assign->variable, 'expression' => $assign->expression->rhs, 'op' => self::$optimizable[$assign->expression->op]]);
     }
     // Optimize "<var>-= -<expr>" to "<var>+= <expr>"
     // Optimize "<var>+= -<expr>" to "<var>-= <expr>"
     if ($assign->expression instanceof UnaryOpNode && '-' === $assign->expression->op && isset(self::$switch[$assign->op])) {
         $assign = new AssignmentNode(['variable' => $assign->variable, 'expression' => $assign->expression->expression, 'op' => self::$switch[$assign->op]]);
     }
     // Not optimizable
     return $assign;
}